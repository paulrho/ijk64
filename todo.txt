
TOFIX
found 20180126

* c64 DEFFN param should be local
* c64 STR$(-5) should not return leading space
* ask question on exit of changed program
* F5 to run
* create a standalone full mp2 like equivalent for timing

c64 INT function should just truncate decimal, still allows very big values
\ kept this as is - matches C64

DONE acode MID needs to be copy of eval version
DONE - mid needs 2 and 3 var version, did this by adding params for func

--
think about this:
you could push Gosubs and Fors onto the acode runtime stack 
  both these stacks are now combined too - so logically it should work
  would alow acode coding of gosub/return for/next
optimise the command parameter list petspeeding (currently it doesnt do it)

optimise DEFFN (currently just rejected compile and interpreted)

update LSET and others to go on both backing screens

interesting...
dump in acode and ainstructioncode format the whole execution compilation


DOC
profiling:
java -agentlib:hprof=cpu=samples,depth=100,interval=5,lineno=y,thread=y,file=out.hprof -jar C64.jar -z m.basic -r -x


==============
done:

2) GOTO #
   GOSUB #
   IF THEN #
     DONE!!

3) DEF FN - compile it
    (currently marked as reject)
    DONE!!

4) optimise the NEXT - currently string processing -
  at least turn it into near-a-code NEXT [mem] statements (where mem could be -2 (none))
    DONE!!
(these three changes take it from 6800 to 7500 benchmark)

--------------------
not done:
1) FOR -> compile this too!

8) make REM truely take no running time after compiling - attempted - looking for a nicer way


2) LIST a,b,c=1,2,3  (now does a,b,c=3,2,1 ) - can be done
   but note, this is a unintended language extension that I don't use anyway - 
   could mark it as reject in the meantime

5) allow sounds to load off web too

6) when you list"prog" and it is not there - it should not do the list

7) make poke198,0 clear the buffer!

9) check the goto gosub ifthen # optimisations to affect edge case (where the next instructions might overlap)

11) allow break from an io (especially net)

12) check the chained case where you jump into the commands half way through
---
END
---
