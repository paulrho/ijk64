10 rem 
12 rem Simulate Cars
14 rem 
16 rem 
18 rem 

20 pi=3.1415
30 screen1
32 cls
  rem car
  rem bx=150:by=150:v=5:an=.25
40 nc=4: dim bx(nc),by(nc),v(nc),an(nc),wa(nc),vo(nc)  
42 sc=1.0:ox=0:oy=-500*0:rem(1.0/3.0)
48 wa(0)=sc:bx(0)=ox:by(0)=oy
50 bx(1)=130:by(1)=300:v(1)=0:an(1)=-2.356:wa(1)=0
52 bx(2)=300:by(2)=1150:v(2)=3:an(2)=-pi/2:wa(2)=0
  rem change1here
54 bx(3)=300:by(3)=4550+1530:v(3)=9*1.5:an(3)=-pi/2:wa(3)=0
56 bx(4)=300:by(4)=600:v(4)=3:an(4)=-pi/2:wa(4)=0

58 mx=0:my=0: rem centre offset, move to middle of screen, not used yet
60 cx=600:cy=600:c1=150
62 fp=40 : rem frames per second
64 gosub8000:rem read data
   rem t=   touching screen, 1=touch down 2=draging 3=touch up
   rem td=  time 
   rem bt=  1 touching screen
   rem iz=  indicator?
   rem fp=  frames per second
   
   rem sc=scale
   rem ox=orginx oy=orginy  - subtract to draw
   rem cx,cy  centre of virtual control stick
   rem c1     limits of control stick
   
   rem bx,by car position
   rem v     car velocity
   rem an    angle of car
   rem wa    angle of steering

   rem reminder add != as equivalent to <>
  
   rem ------------------------------------------------ 
   rem loop
100 gosub 3000: rem read commands
110 beginframe:cls:c=0:gosub8050:sc=wa(0):ox=bx(0):oy=by(0)
120 sc=sc*0.65:rem for now shrink to fit apple
130 gosub7000: rem draw landscape

200 forc=1tonc:vo(c)=v(c):rem for each car
210 ift>0thenbt=1:ift=3thenbt=0
220 ift>0then:gprint str$(t),x,y,4
230 ifbt=0thenx=cx
240 ifbt>0thengosub4000: rem command inputs if pressing
250 ift=3theniz=0: rem hard coded indicator change
260 ifbt=1thenwa=atn(75/10*(x-cx)/c1*0.10):rem else leave as is!

270 gosub8050
280 an(c)=an(c)+v(c)*tan(wa(c))/75
290 gprint"o",cx,cy,6: rem control stick centre
300 gosub5000: rem do indicators
310 gosub6500: rem draw stats
320 gosub6000: rem draw car more complex
330 rem was endframe
   rem physics
340 if c=1 then v(c)=v(c)*0.99:rem friction/braking
350 ifabs(v(c))>0.1then:alert2
   rem only for car 1 for the moment
360 if c=1 and bt=0thenv(c)=v(c)*0.975:rem friction/braking
370 bx(c)=bx(c)+v(c)*cos(an(c)):by(c)=by(c)+v(c)*sin(an(c))

   rem virtual bounding box
390 ifc<>1 or 1=1 then400 : rem continue
392 ifbx(c)<95thenbx(c)=95:v(c)=-v(c)*0.1
394 ifby(c)<95thenby(c)=95:v(c)=-v(c)*0.1
396 ifbx(c)>730thenbx(c)=730:v(c)=-v(c)*0.1
398 ifby(c)>985thenby(c)=985:v(c)=-v(c)*0.1

400 if1=0then:gprint"a="+str$(int(40.5*fp*fp/1000*(v(c)-vo(c))*1000)/1000)+"m/s/s",500,500+30*c,4
405 nextc
410 endframe

500 remif1=1thensleep20:rem normal speed
510 if1=1thensleep12:rem normal speed
520 if1=0thensleep100:rem slow motion
540 td=td+1/fp:rem fp=frames/sec
550 goto 100: rem loop back

   rem ---------------------------------------------
3000 rem [sub read user tap]
3010 deffn pk(a)=peek(a)+peek(a+1)*256
3020 xt=1030
3030 yt=1032
3040 rempoke 1024,0
3050 t=peek(1024):remif t = 0 then goto 3050
3055 poke1024,0
3060 x = fn pk(xt) : y = fn pk(yt)
3070 return

     rem command inputs
4000 ifiz=1thenifx<cx-c1thenx=cx-c1
4001 ifiz=1thenifx>cx+c1thenx=cx+c1
4002 ifiz=1thenify<cy-c1theny=cy-c1
4003 ifiz=1thenify>cy+c1theny=cy+c1
4005 ifx<cx-c1 or x>cx+c1 then x=cx:return
4010 ify<cy-c1 or y>cy+c1 then x=cx:return
4020 acc=-(y-cy)/c1
4022 reman=an+v/10*(x-cx)/c1*0.10
4042 ifacc<0andv>0thenacc=acc*3
4043 ifacc>0andv<0thenacc=acc*3:rem brake in rev

4045 v(c)=v(c)+acc*0.20*cos(v(c)/30)

4050 gprint"a",x-30,y-30,5
4060 ifbt>0then:linecx,cy,x,y,12
4065 gprintstr$(x-cx),x,y,11
4070 iz=1
4090 return

     rem lights/indicators
5000 f=f+1:iff>20thenf=0
5005 i1=5:i2=5
5010 ifv(c)<-0.02theni1=6:i2=6
5020 ifv(c)>0theni1=5:i2=5
5030 iff>=0theni2=5:iff>5theni2=6
5040 ifacc<0andv(c)>0theni1=1:i2=1
5050 ifacc>0andv(c)<-0.02theni1=1:i2=1
5090 return

     rem draw  car
6000 line sc*(bx(c)-ox),sc*(by(c)-oy),sc*(bx(c)+cos(an(c))*67-ox),sc*(by(c)+sin(an(c))*67-oy),5
6002 hx=bx(c)+cos(an(c)+pi/2)*18:hy=by(c)+sin(an(c)+pi/2)*18
6004 line sc*(hx-ox),sc*(hy-oy), sc*(bx(c)+cos(an(c)-pi/2)*18-ox),sc*(by(c)+sin(an(c)-pi/2)*18-oy),5
6006 rem wa=atn(75/10*(x-cx)/c1*0.10)
     rem draw  car front wheels
6007 ws=7:lset3,0
6008 hx=bx(c)+cos(an(c)+pi/2)*18:hy=by(c)+sin(an(c)+pi/2)*18
6010 line sc*(hx+cos(an(c)+pi)*ws-ox),sc*(hy+sin(an(c)+pi)*ws-oy), sc*(hx+cos(an(c))*ws-ox),sc*(hy+sin(an(c))*ws-oy),5
6020 hx=bx(c)+cos(an(c)-pi/2)*18:hy=by(c)+sin(an(c)-pi/2)*18
6030 line sc*(hx+cos(an(c)+pi)*ws-ox),sc*(hy+sin(an(c)+pi)*ws-oy), sc*(hx+cos(an(c))*ws-ox),sc*(hy+sin(an(c))*ws-oy),5
6040 hx=bx(c)-70*cos(an(c)+pi/12+pi):hy=by(c)+sin(an(c)+pi/12)*70
6050 line sc*(hx+cos(an(c)+pi+wa(c))*ws-ox),sc*(hy+sin(an(c)+pi+wa(c))*ws-oy), sc*(hx+cos(an(c)+wa(c))*ws-ox),sc*(hy+sin(an(c)+wa(c))*ws-oy),5
6060 hx=bx(c)-70*cos(an(c)-pi/12+pi):hy=by(c)+sin(an(c)-pi/12)*70
6070 line sc*(hx+cos(an(c)+pi+wa(c))*ws-ox),sc*(hy+sin(an(c)+pi+wa(c))*ws-oy), sc*(hx+cos(an(c)+wa(c))*ws-ox),sc*(hy+sin(an(c)+wa(c))*ws-oy),5
6100 lset1,0
6105 kx=bx(c)+cos(an(c)+pi*0.7)*25:ky=by(c)+sin(an(c)+pi*0.7)*25
6110 lx=bx(c)+cos(an(c)+0.24)*85:ly=by(c)+sin(an(c)+0.24)*85
6115 line sc*(kx-ox),sc*(ky-oy),sc*(lx-ox),sc*(ly-oy),3
6120 hx=bx(c)+cos(an(c)-pi*0.7)*25:hy=by(c)+sin(an(c)-pi*0.7)*25
6130 jx=bx(c)+cos(an(c)-0.24)*85:jy=by(c)+sin(an(c)-0.24)*85
6135 linesc*(hx-ox),sc*(hy-oy),sc*(jx-ox),sc*(jy-oy),3
6140 linesc*(hx-ox),sc*(hy-oy),sc*(kx-ox),sc*(ky-oy),3
6150 linesc*(lx-ox),sc*(ly-oy),sc*(jx-ox),sc*(jy-oy),3
6160 gprint""+str$(int(40.5*fp*3.6/1000*v(c)*1)/1),sc*(bx(c)-20-ox),sc*(by(c)-oy),4
6190 return

6500 rem write stats
6510 fset"courier",40
6520 remgprint"t="+str$(int(td*1000)/1000),100,50,5
6522 gprint"t="+left$(mid$(str$(1000+int((td+0.004)*100)/100+0.001),3),5),100,50,5
6525 fset"courier",16
6530 rem gprint"v(r)="+str$(int(40.5*fp*3.6/1000*v*1000)/1000),100,75,5
6540 rem gprint"v="+str$(int(v(c)*1000)/1000),100,100,5
6550 rem gprint"dA="+str$(int(v(c)/10*(x-cx)/c1*0.10*10000)/10000),100,150,5
6560 rem gprintstr$(int(atn(75/10*(x-cx)/c1*0.10)*180/pi*100)/100)+" deg",100,200,5
6570 ifc=1thengprint"range="+str$(int((by(3)-by(1))/40.5*1 -4 )/1)+"m",500,200,5
6590 return

     rem background
7000 linesc*(30-ox),sc*(0-oy),sc*(30-ox),sc*(1000-oy),3
7010 linesc*(350-ox),sc*(0-oy),sc*(350-ox),sc*(1000-oy),3
7020 linesc*(490-ox),sc*(0-oy),sc*(490-ox),sc*(1000-oy),3
7030 linesc*(200-ox),sc*(0-oy),sc*(200-ox),sc*(480-oy),3
7040 linesc*(200-ox),sc*(480-oy),sc*(260-ox),sc*(550-oy),3
7050 linesc*(260-ox),sc*(550-oy),sc*(260-ox),sc*(630-oy),3
7060 linesc*(260-ox),sc*(630-oy),sc*(200-ox),sc*(1000-oy),3
7070 linesc*(30-ox),sc*(250-oy),sc*(200-ox),sc*(410-oy),3
7080 linesc*(30-ox),sc*(170-oy),sc*(200-ox),sc*(330-oy),3
7090 linesc*(30-ox),sc*(90-oy),sc*(200-ox),sc*(250-oy),3
7090 linesc*(30-ox),sc*(90-80*1-oy),sc*(200-ox),sc*(250-80*1-oy),3
7090 linesc*(30-ox),sc*(90-80*2-oy),sc*(200-ox),sc*(250-80*2-oy),3
7090 linesc*(30-ox),sc*(90-80*3-oy),sc*(200-ox),sc*(250-80*3-oy),3

7090 linesc*(30-ox),sc*(90-80*4-oy),sc*(200-ox),sc*(250-80*4-oy),3
7090 linesc*(30-ox),sc*(90-80*5-oy),sc*(200-ox),sc*(250-80*5-oy),3
7090 linesc*(30-ox),sc*(90-80*6-oy),sc*(200-ox),sc*(250-80*6-oy),3
7090 linesc*(30-ox),sc*(90-80*7-oy),sc*(200-ox),sc*(250-80*7-oy),3

7060 linesc*(260-ox),sc*(0-oy),sc*(260-ox),sc*(550-oy),7 : rem white line

7100 linesc*(80-ox),sc*(180+30-oy),sc*(50+30+72-ox),sc*(180+30+72-oy),10
7110 linesc*(80-ox),sc*(180+30-oy),sc*(50+30+25-ox),sc*(180+30-25-oy),10
7120 linesc*(50+30+72-ox),sc*(180+72+30-oy),sc*(50+30+72+25-ox),sc*(180+30+72-25-oy),10
7130 linesc*(50+30+72+25-ox),sc*(180+30+72-25-oy),sc*(50+30+25-ox),sc*(180+30-25-oy),10
7290 return

8000 mx=50:i=0:dimat(mx),ao(mx),ac(mx),ar(mx),av(mx),ad(mx),as(mx)
8010 readat(i),ao(i),ac(i),ar(i),av(i),ad(i)
8020 ifat(i)>=0theni=i+1:goto8010
8030 mx=i-1:return

8050 fori=0tomx
8052   ifao(i)<>cthen8090:rem continue
8055   iftd>=at(i) and td<=at(i)+ad(i) then8070
8060   goto8090
8070   ifar(i)<0then8080:rem already started
8072   rem calc step
8074   ifac(i)=0thenas(i)=(( v(c)*ar(i)+av(i))-v(c) )/ad(i):ar(i)=-1
8076   ifac(i)=1thenas(i)=((wa(c)*ar(i)+av(i))-wa(c))/ad(i):ar(i)=-1
8076   ifac(i)=2thenas(i)=(( bx(c)*ar(i)+av(i))-bx(c) )/ad(i):ar(i)=-1
8076   ifac(i)=3thenas(i)=(( by(c)*ar(i)+av(i))-by(c) )/ad(i):ar(i)=-1
8080   ifac(i)=0thenv(c)=v(c)+as(i): rem will /fp when all fixed
8082   ifac(i)=1thenwa(c)=wa(c)+as(i)/fp:rem will /fp when all fixed
8082   ifac(i)=2thenbx(c)=bx(c)+as(i)/fp:rem will /fp when all fixed
8082   ifac(i)=3thenby(c)=by(c)+as(i)/fp:rem will /fp when all fixed
8090 nexti:return

8200 remdata  0.1,1,1,1,+0.5,0.2: rem turn wheel right in one second
8205 remdata  2.0,1,0,1, -0.22,5.0  : rem was -0.20

8210 data  0.0,1,0,1, -0.11,2.0  : rem was -0.20
8220 data  3.0,1,0,1, +0.01,2.0  : rem was -0.20
8230 data  4.0,1,0,1, -0.15,1.5  : rem was -0.20

8240 data  4.4,1,1,1,-0.40,1.0: rem turn wheel left in one second
8250 data  6.0,1,0,1, -0.02,2.0:   rem was -0.04
8260 data  6.5,1,0,1, -0.02,2.0:   rem was -0.04

8270 data  7.7,1,1,1,+0.40,1.0: rem turn wheel right in one second
8280 remdata 10.0,1,0,1,1.0,5.0 : rem without braking

8290 remdata 10.0,1,0,1,0.2,1.0
8300 data 9.6,1,0,1,0.3,2.6:    rem accelerate

8310 data 11.0,1,1,1,-0.02,1.0: rem turn wheel
8315 remdata 13.0,1,0,1,-0.020,0.5:  rem brake- move vel to zero
8320 data 13.0,1,0,1,-0.020,0.5:  rem brake- move vel to zero
8330 data 13.0,1,1,1,-0.2,3.0: rem turn wheel
8340 data 16.0,1,0,1,0.18,5.0:    rem accelerate
8350 data 22.0,1,0,1,0.045,5.5:    rem accelerate
8360 data 21.0,1,1,1,+0.65,0.5: rem turn wheel straighen up to curb
8370 data 28.0,1,1,1,-0.35,1.0: rem turn wheel straighen up to curb

rem misc2 and 4
8380 data 0.0,2,0,1,0.3,15.0: rem misc car accelerating
8390 data 0.0,4,0,1,0.3,15.0: rem misc car accelerating

rem bad car
rem change2here
8400 data 7.0,3,0,1,-0.1125,3.0: rem braking 

8410 data 10.2,3,1,1,+0.09,0.2: rem turn wheel 
8420 data 10.6,3,1,1,-0.09,0.2: rem turn wheel 
8430 data 11.27,3,1,1,-0.18,0.2: rem turn wheel back in
8440 data 11.7,3,1,1,+0.11,0.2: rem turn wheel 
8450 data 12.0,3,1,1,+0.11,0.2: rem turn wheel 
8460 data 12.5,3,0,1,-0.20,2.0: rem braking 
8470 data 13.5,3,0,1,-0.025,2.0: rem braking 
8480 data 18.0,3,1,1,-0.10,0.2: rem turn wheel 

8500 remdata 0.0, 0,1,0,1.00,0.25: 
8510 data 2.0, 0,1,0,0.33333333,2.0: 
8520 remdata 6.0, 0,1,1,1,10.0: rem good
8530 data 6.0, 0,1,0,1.00,7.0:  rem zoom a bit more
8540 data 10.0, 0,3,0,-500,4.0: rem pan up 

8990 data -1,-1,-1,-1,-1,-1
9990 rem end: --------------------------------------------
